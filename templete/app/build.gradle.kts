/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


//task:
// generateJniHeaders - Generate JNI header files using javac -h.
// buildRustBinary - Build the Rust binary.

// copyRustBinary - Copy the Rust binary to the resources folder.




tasks.register<Exec>("generateJniHeaders") {
    group = "build"
    description = "Generate JNI header files using javac -h."
    workingDir = file("src/main/java")
    commandLine(
        "javac",
        "-h",
        "${buildDir}/generated-headers",
        "org/example/NativeLib.java"
    )
}



tasks.register<Exec>("buildRustBinary") {
    group = "build"
    description = "Build the Rust binary."
    workingDir = file("../lib_rust") // Ensure this path is correct
    commandLine("cargo", "build", "--release")
}
tasks.register<Copy>("copyRustBinary") {
    group = "build"
    description = "Copy the Rust binary to the resources folder."
    dependsOn("buildRustBinary")
    from("../rust/target/release/your_binary_name")
    into("src/main/resources/binaries")
}

// ...existing code...



// Ensure the headers are generated before compilation
tasks.named("compileJava") {
    dependsOn("generateJniHeaders")
}
